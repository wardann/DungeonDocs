#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const red = str => `[31m${str}[0m`;
const blue = str => `[34m${str}[0m`;
const yellow = str => `[33m${str}[0m`;

// Ensure a file path is provided
if (process.argv.length < 3) {
  console.error('Usage: ./parseLlsOutput.js <path/to/check.json>');
  process.exit(1);
}

// Get the file path from the command line arguments
const filePath = process.argv[2];

// Read and parse the JSON file
let data;
try {
  data = fs.readFileSync(filePath, 'utf8');
} catch (err) {
  console.error(`${red('Error reading file:')} ${err.message}`);
  process.exit(1);
}

let diagnostics;
try {
  diagnostics = JSON.parse(data);
} catch (parseErr) {
  console.error(`${red('Error parsing JSON:')} ${parseErr.message}`);
  process.exit(1);
}

// Keep track of the total number of errors
let totalErrors = 0;

for (const fileUri in diagnostics) {
  const issues = diagnostics[fileUri];
  if (!issues || issues.length === 0) continue;

  // Convert the URI to a relative path
  const decodedPath = decodeURIComponent(new URL(fileUri).pathname); const relativePath = path.relative(process.cwd(), decodedPath); // Extract original file path
  console.log(`${blue('File:')} ${relativePath}`);

  for (const issue of issues) {
    const { message, range } = issue;
    const startLine = range.start.line + 1; // Convert to 1-based index
    console.log(`  ${yellow(`Line ${startLine}:`)} ${message}`);
    totalErrors++;
  }
}

if (totalErrors > 0) {
  console.log(`
${red(`Found ${totalErrors} errors.`)}`);
  process.exit(1);
} else {
  console.log('No errors found.');
}
